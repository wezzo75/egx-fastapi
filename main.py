# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Eqat_PhpHlqYm4BcKe4337IpXD2T-HkM
"""

# === EGX Smart Money FastAPI Server (Render-Ready) ===

import pandas as pd
import numpy as np
import io
import matplotlib.pyplot as plt
from datetime import time as _time
from zoneinfo import ZoneInfo
from retry import retry
import gspread
from gspread_dataframe import set_with_dataframe
from google.auth import default
from google.oauth2.service_account import Credentials
from tvDatafeed import TvDatafeed, Interval
import matplotlib
matplotlib.use('Agg')  # Headless for server

from fastapi import FastAPI, Query
from fastapi.responses import StreamingResponse

# === Config ===
INTERVAL = Interval.in_5_minute
N_BARS = 3000
TZ = ZoneInfo('Africa/Cairo')

# === TradingView & Google Auth ===
tv = TvDatafeed()  # Limited without login
SERVICE_ACCOUNT_FILE = "service_account.json"  # Put your service key here
SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
gc = gspread.authorize(creds)
sheet = gc.open("EGX_Intraday_Data")
tickers = [t.strip().upper() for t in sheet.worksheet("Config").col_values(1) if t.strip().upper() != "TICKERS"]

# === Utilities ===
@retry((ConnectionError, TypeError), tries=5, delay=0.5)
def fetch_data(symbol: str) -> pd.DataFrame:
    df = tv.get_hist(symbol=symbol, exchange="EGX", interval=INTERVAL, n_bars=N_BARS)
    if df is None or df.empty:
        return pd.DataFrame()
    df = df.rename(columns={"open": "Open", "high": "High", "low": "Low", "close": "Close", "volume": "Volume"})
    df.index = pd.to_datetime(df.index).tz_localize("UTC").tz_convert(TZ)
    return df[["Open", "High", "Low", "Close", "Volume"]]

def market_hours(df: pd.DataFrame):
    return df.between_time("10:00", "14:30")[~df.index.weekday.isin([4,5])]

# === Indicator Engine ===
def analyze_df(df: pd.DataFrame):
    df = df.copy()
    df["RunDate"] = df.index.normalize()
    closes = df.groupby("RunDate")["Close"].last()
    df["Prev_Close"] = df["RunDate"].map(lambda d: closes.shift().get(d))
    df["Change_%"] = (df["Close"] / df["Prev_Close"] - 1) * 100
    df["Date"], df["Time"] = df.index.date, df.index.time
    uniq = sorted(df["Date"].unique())
    prev7 = {d: [x for x in uniq[max(0, i-10):i] if pd.Timestamp(x).weekday() not in [4, 5]][-7:] for i, d in enumerate(uniq)}
    df["Vol_Avg_7"] = df.apply(lambda r: df[(df["Date"].isin(prev7.get(r["Date"], []))) & (df["Time"] == r["Time"])]
                                            ["Volume"].mean(), axis=1)
    df["Vol_Spike"] = df["Volume"] > 1.5 * df["Vol_Avg_7"]
    delta = df["Close"].diff()
    gain, loss = delta.clip(lower=0), -delta.clip(upper=0)
    df["RSI_5"] = 100 - (100 / (1 + gain.ewm(com=4).mean() / loss.ewm(com=4).mean()))
    tp = (df["High"] + df["Low"] + df["Close"]) / 3
    mf = tp * df["Volume"]
    pos, neg = mf.where(tp > tp.shift(), 0), mf.where(tp < tp.shift(), 0)
    df["MFI_14"] = 100 - (100 / (1 + pos.rolling(14).sum() / neg.rolling(14).sum()))
    df["CumVP"] = (df["Close"] * df["Volume"]).groupby(df.index.date).cumsum()
    df["CumVol"] = df["Volume"].groupby(df.index.date).cumsum()
    df["VWAP"] = df["CumVP"] / df["CumVol"]
    df["SMA_9"], df["SMA_20"] = df["Close"].rolling(9).mean(), df["Close"].rolling(20).mean()
    df["Trend"] = np.where(df["SMA_9"] > df["SMA_20"], "Uptrend", "Downtrend")
    df["RIV"] = df["Volume"] / df.groupby(df.index.time)["Volume"].transform(lambda x: x.rolling(10, 1).mean())
    df["Rec"] = df.apply(lambda r: "STRONG BUY" if r["Vol_Spike"] and r["Close"] > r["VWAP"]
                         else "BUY" if r["Close"] > r["VWAP"] and r["RIV"] > 1.5
                         else "SELL" if r["Close"] < r["VWAP"] and r["RIV"] > 1.5
                         else "HOLD", axis=1)
    df["Signal"] = np.where((df["Trend"] == "Uptrend") & (df["RSI_5"] > 50), "BUY",
                     np.where((df["Trend"] == "Downtrend") & (df["RSI_5"] < 50), "SELL", "HOLD"))
    df["Analysis"] = df.apply(lambda r: f"Trend={r['Trend']}, RSI={r['RSI_5']:.1f}, Spike={r['Vol_Spike']}, Change%={r['Change_%']:.2f}, Rec={r['Rec']}", axis=1)
    return df

# === FastAPI App ===
app = FastAPI()

@app.get("/analyze")
def analyze(ticker: str = Query(...)):
    df = fetch_data(ticker)
    df = market_hours(df)
    df = analyze_df(df)
    r = df.iloc[-1]
    return {
        "ticker": ticker.upper(), "close": round(r["Close"], 2), "volume": int(r["Volume"]),
        "rsi": round(r["RSI_5"], 2), "rvol": round(r["RIV"], 2), "change_pct": round(r["Change_%"], 2),
        "recommendation": r["Rec"], "signal": r["Signal"], "analysis": r["Analysis"]
    }

@app.get("/alert")
def alert(ticker: str = Query(...)):
    df = fetch_data(ticker)
    df = market_hours(df)
    df = analyze_df(df)
    r = df.iloc[-1]
    alert = "NO ALERT"
    if r["Rec"] == "STRONG BUY":
        alert = f"🚀 STRONG BUY Alert for {ticker}: Volume Spike + R1 Breakout!"
    elif r["Rec"] == "BUY":
        alert = f"✅ BUY Alert for {ticker}: Above VWAP with Volume Support"
    elif r["Rec"] == "SELL":
        alert = f"⚠️ SELL Alert for {ticker}: Below VWAP on High RVol"
    return {"ticker": ticker.upper(), "alert": alert, "details": r["Analysis"]}

@app.get("/history")
def history(ticker: str = Query(...)):
    df = fetch_data(ticker)
    df = market_hours(df)
    df = analyze_df(df)
    df = df[["Close", "Volume", "VWAP", "RSI_5", "RIV", "Rec", "Signal"]].dropna().copy()
    df["Time"] = df.index.strftime("%Y-%m-%d %H:%M")
    return {"ticker": ticker.upper(), "records": df.tail(100).to_dict(orient="records")}

@app.get("/chart")
def chart(ticker: str = Query(...)):
    df = fetch_data(ticker)
    df = market_hours(df)
    df = analyze_df(df)
    if df.empty:
        return {"error": "No data available"}

    fig = plt.figure(figsize=(12, 8))
    gs = fig.add_gridspec(3, 1, height_ratios=[3, 1, 1], hspace=0.3)
    ax1 = fig.add_subplot(gs[0])
    ax2 = fig.add_subplot(gs[1], sharex=ax1)
    ax3 = fig.add_subplot(gs[2], sharex=ax1)

    df["Close"].plot(ax=ax1, label="Close", lw=2, color="black")
    df["VWAP"].plot(ax=ax1, label="VWAP", lw=1.5, linestyle="--", color="blue")
    df["SMA_9"].plot(ax=ax1, label="SMA 9", lw=1.2, color="green")
    df["SMA_20"].plot(ax=ax1, label="SMA 20", lw=1.2, color="red")
    ax1.set_ylabel("Price")
    ax1.set_title(f"{ticker.upper()} - Intraday Price with VWAP, SMA")
    ax1.legend()
    ax1.grid(True)

    df["RSI_5"].plot(ax=ax2, label="RSI-5", color="purple", lw=1.5)
    ax2.axhline(70, color="red", linestyle="--", linewidth=1)
    ax2.axhline(30, color="green", linestyle="--", linewidth=1)
    ax2.set_ylabel("RSI")
    ax2.set_ylim(0, 100)
    ax2.grid(True)
    ax2.legend()

    ax3.bar(df.index, df["Volume"], color="gray", width=0.005)
    ax3.set_ylabel("Volume")
    ax3.grid(True)

    plt.setp(ax1.get_xticklabels(), visible=False)
    plt.setp(ax2.get_xticklabels(), visible=False)
    plt.xticks(rotation=45)
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close(fig)

    return StreamingResponse(buf, media_type="image/png")

@app.get("/health")
def health():
    return {"status": "OK", "message": "EGX FastAPI server is running"}

# === Entry point for Render ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000)